from common_rsa_functions import egcd as egcd
from common_rsa_functions import modinv as modinv
from RSAObject import RSAObject
from fractions import gcd
from sage.all_cmdline import *
from RSAExploits.RSA_Ciphertext import *

# Check if the moduli used to encrypt 2 ciphertexts have a common factor
# If so, this function will attempt to recover the private exponent
# used for decryption. Returns a list of ciphertexts that can now be
# decrypted.
def common_factor(ciphertext1, ciphertext2):

    decryptable = []
    p = long(gcd(ciphertext1.rsa.n, ciphertext2.rsa.n))
    if p == 1:
	return decryptable
    q1 = long(ciphertext1.rsa.n / p)
    q2 = long(ciphertext2.rsa.n / p)
    
    if p in Primes() and q1 in Primes():
	totient = (p- 1) * (q1 - 1)
	d = long(modinv(ciphertext1.rsa.e, totient))
	ciphertext1.rsa.p = p
	ciphertext1.rsa.q = q1
	ciphertext1 = RSA_Ciphertext(ciphertext1.c, ciphertext1.rsa.n, ciphertext1.rsa.e, d, p, q1)
	decryptable.append(ciphertext1)

    if p in Primes() and q2 in Primes():
	totient = (p- 1) * (q2 - 1)
	d = long(modinv(ciphertext2.rsa.e, totient))
	ciphertext2.rsa.p = p
	ciphertext2.rsa.q = q2
	ciphertext2 = RSA_Ciphertext(ciphertext2.c, ciphertext2.rsa.n, ciphertext2.rsa.e, d, p, q2)
	decryptable.append(ciphertext2)

    return decryptable

