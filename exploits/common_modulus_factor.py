from common_rsa_functions import egcd as egcd
from common_rsa_functions import modinv as modinv
from RSAObject import RSAObject
from fractions import gcd

# Check if any of the moduli have common prime factors
def attack(rsa_object):
    print "Common Moduli Factors Test"
    decrypted = []
    ciphertexts = rsa_object.ciphertexts
    for i in range(0, len(ciphertexts)):
        for j in range(i + 1, len(ciphertexts)):
            if(RSAObject.get_modulus(ciphertexts[i]) == RSAObject.get_modulus(ciphertexts[j])):
                continue
            q = gcd(RSAObject.get_modulus(ciphertexts[i]), RSAObject.get_modulus(ciphertexts[j]))
            if q != 1:
                p1 = RSAObject.get_modulus(ciphertexts[i]) / q
                p2 = RSAObject.get_modulus(ciphertexts[j]) / q
                totient1 = (q - 1) * (p1 - 1)
                totient2 = (q - 1) * (p2 - 1)
                d1 = modinv(RSAObject.get_exponent(ciphertexts[i]), totient1)
                d2 = modinv(RSAObject.get_exponent(ciphertexts[j]), totient2)
                message1 = pow(RSAObject.get_ciphertext(ciphertexts[i]), d1, RSAObject.get_modulus(ciphertexts[i]))
                message2 = pow(RSAObject.get_ciphertext(ciphertexts[j]), d2, RSAObject.get_modulus(ciphertexts[j]))
                if message1 != 0 and i not in decrypted:
                    print "Decrypted message #" + str(i) + ": " + hex(message1)[2:-1].decode('hex')
                    decrypted.append(i)
                if message2 != 0 and i not in decrypted:
                    print "Decrypted message #" + str(j) + ": " + hex(message2)[2:-1].decode('hex')
                    decrypted.append(j)
    print "------------------------------------------------------------------------"
                


