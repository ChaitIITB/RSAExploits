from common_rsa_functions import egcd as egcd
from common_rsa_functions import modinv as modinv
from RSAObject import RSAObject
from fractions import gcd
from sage.all_cmdline import *
from RSAExploits.RSA_Ciphertext import *

# Check if the moduli used to encrypt 2 ciphertexts have a common factor
# If so, this function will attempt to recover the private exponent
# used for decryption. Returns a list of ciphertexts that can now be
# decrypted.
def common_factor(c1, c2):

    decryptable = []
    p = long(gcd(c1.rsa.n, c2.rsa.n))
    if p == 1:
	return decryptable
    q1 = long(c1.rsa.n / p)
    q2 = long(c2.rsa.n / p)
    
    if p in Primes() and q1 in Primes():
	totient = (p- 1) * (q1 - 1)
	d = long(modinv(c1.rsa.e, totient))
	c1.rsa.p = p
	c1.rsa.q = q1
	c1 = RSA_Ciphertext(c1.c, c1.rsa.n, c1.rsa.e, d, p, q1)
	decryptable.append(c1)

    if p in Primes() and q2 in Primes():
	totient = (p- 1) * (q2 - 1)
	d = long(modinv(c2.rsa.e, totient))
	c2.rsa.p = p
	c2.rsa.q = q2
	c2 = RSA_Ciphertext(c2.c, c2.rsa.n, c2.rsa.e, d, p, q2)
	decryptable.append(c2)

    return decryptable

