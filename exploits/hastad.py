#!/usr/bin/env python

from RSAExploits import util
from Exploit import Exploit

class hastad(Exploit):
	n = []
	c = []
	m = None
	msg = None
	found = False 
	
	def run(self, rsadata):
		print ("Hastad: Running Attack...")
		
		if type (rsadata) is not list:
			print("Hastad: List of rsadata is required.")
			return None
		else:
			edict = self.group_by_e(rsadata)
			for e, nc in edict.iteritems():
				self.n, self.c = nc[::2], nc[1::2]
				self.m = self.execute(e, self.n, self.c)
				if self.m != None:
					self.msg = self.m
					found = True 
					for rdata in rsadata:
						if e == rdata.getE():
							rdata.setM(self.m)			    
		if found:
			print "Message: ", self.msg		
			print("Hastad: Success, message found.")
			return True							
		else: 			
			print("Hastad: Failure, message not found.")
			return False		
			
	@staticmethod 		
	def group_by_e(dset):
		edict = {}
		for rdata in dset:
			if rdata.getE() in edict:
				if rdata.getN() not in edict[rdata.getE()]:
					edict[rdata.rsaobj.e].append(rdata.getN())
					edict[rdata.rsaobj.e].append(rdata.getC())	
			else:
				edict.update({rdata.rsaobj.e:[rdata.getN()]})
				edict[rdata.rsaobj.e].append(rdata.getC())	
		return edict
	

	@staticmethod
	def execute(e,ns,cs):
		s = util.CRT(ns, cs)
		pt = util.int_nthroot(s, e)
		if pt is not None:
			return pt
		else:
		#	print "Cannot find %dth root of %s" % (e, hex(s))
			return None

		    
