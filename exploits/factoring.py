#http://www.sagemath.org/doc/thematic_tutorials/explicit_methods_in_number_theory/integer_factorization.html


from sage.all_cmdline import *
from Crypto.Util.number import *


# works when one prime factor is much smaller (20-30 digits)
def _ecm(l):
	print "Factoring using ECM:"
	print ecm.factor(l)
'''	
#example:
k = getStrongPrime(512)
r = next_prime(2**70);
l = k*r
result = ecm.factor(l);
print result
'''

# works for prime factors of around 130 bits 
def _qsieve(l):
	print "Factoring using Quadratic Sieve:"
	print qsieve(l)

'''
example
sage: p = next_prime(2^128)
sage: q = next_prime(2^130)
sage: n = p*q
sage: %time qsieve(n)
'''
