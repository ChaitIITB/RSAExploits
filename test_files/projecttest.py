# This script was written assuming that the RSAExploits directory
# is located in the same directory as this script

from RSAExploits.RSA_Ciphertext import *
from RSAExploits.exploits import common_modulus as common_modulus
from RSAExploits.exploits import common_modulus_factor as common_modulus_factor
from RSAExploits.exploits import simple_CRT as simple_CRT 

# Parse and store all of the ciphertexts provided by the file
ciphertexts = []
c = None
e = None
N = None
f = open("common_moduli_test.txt", 'r')
for line in f:
    if line.startswith("ciphertext"):
        c = long(line.split(" ")[2], 0)
    elif line.startswith("e"):
        e = long(line.split(" ")[2])
    elif line.startswith("N"):
        N = long(line.split(" ")[2], 0)
        ciphertexts.append(RSA_Ciphertext(c, N, e))
f.close()
modulus_dictionary = common_modulus.group_ciphertexts_by_moduli(ciphertexts)
for key in modulus_dictionary:
    for i in range(0, len(modulus_dictionary[key]) - 1):
        for j in range(1, len(modulus_dictionary[key])):
    	    plaintext = common_modulus.common_modulus_exploit(modulus_dictionary[key][i], modulus_dictionary[key][j])
	    if plaintext != None:
	        print hex(plaintext)[2:-1].decode("hex")
########################################################################

ciphertexts = []
c = None
e = None
N = None
f = open("common_factor_test.txt", 'r')
for line in f:
    if line.startswith("ciphertext"):
        c = long(line.split(" ")[2], 0)
    elif line.startswith("e"):
        e = long(line.split(" ")[2])
    elif line.startswith("N"):
        N = long(line.split(" ")[2], 0)
        ciphertexts.append(RSA_Ciphertext(c, N, e))
f.close()
for i in range(0, len(ciphertexts) - 1):
    for j in range(1, len(ciphertexts)):
	decryptable = common_modulus_factor.common_factor(ciphertexts[i], ciphertexts[j])
	if len(decryptable) > 0:
	    plaintext = decryptable[0].rsa.decrypt(decryptable[0].c)
	    if plaintext == 0:
		continue
	    print hex(plaintext)[2:-1].decode("hex")
	    exit(0)
'''
my_object = RSAObject("crt_test.txt", 1)
common_modulus.attack(my_object)
common_modulus_factor.attack(my_object)
simple_CRT.attack(my_object)

my_object = RSAObject("common_factor_test.txt", 0)
common_modulus.attack(my_object)
common_modulus_factor.attack(my_object)
simple_CRT.attack(my_object)

my_object = RSAObject("common_moduli_test.txt", 1)
common_modulus.attack(my_object)
common_modulus_factor.attack(my_object)
simple_CRT.attack(my_object)
'''
